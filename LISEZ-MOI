

Sommaire :
  Procédure d'installation
  1. Dépendances
  2. Lancement du serveur de développement
  3. Déploiement




****** Procédure d'installation ******

  Toutes les commandes sont à exécuter dans le répertoire du projet.

  * Vérifier la satisfaction des dépendances (voir « 1. Dépendances »).

  * Choisir un mode de lancement :
      ** Pour lancer le serveur de développement, voir « 2. Lancement du serveur de développement ».
      ** Pour déployer le site, voir « 3. Déploiement ».  Nul besoin de suivre les instructions de la partie 2.



****** 1. Dépendances ******

  * Système d'exploitation : Ubuntu 11.10 « Oneiric Ocelot »


  * Paquets requis :
      nano
      mysql-server      5.1
      python-mysqldb    1.2.3
      python-pip        1.0
      python-docutils   0.7 (pour la documentation de l'interface d'administration de django)


  * Paquets supplémentaires requis pour le déploiement :
      apache2                 2.2
      libapache2-mod-wsgi     3.3


  * Installations :
      django               1.3.1
        sudo pip install django==1.3.1

      django-reversion               1.5.1
        sudo pip install django-reversion==1.5.1

      django-tinymce       1.5.1a2
        sudo pip install django-tinymce==1.5.1a2

      django-grappelli     2.3.7
        sudo pip install django-grappelli==2.3.7

      django-filebrowser   3.3.0
        sudo pip install django-filebrowser==3.3.0

      le paquet python-imaging ou :
        sudo pip install pil



****** 2. Lancement du serveur de développement ******

  * Passer en mode DEBUG :

      ** Éditer le fichier de réglages :
          nano settings.py
      ** Remplacer la ligne « DEBUG = False » par :
          DEBUG = True


  * Création de la base de données dans MySQL :
      mysql -uroot -p
        CREATE DATABASE musicologie;
        exit;


  * Paramétrer l'authentification de MySQL :

      ** Éditer le fichier de réglages :
          nano settings.py
      ** Les réglages à modifier sont dans « DATABASES ».


  * Création des tables de la base de données :
      python manage.py syncdb


  * Création des révisions initiales :
      python manage.py createinitialrevisions


  * Collecte des fichiers statiques :
      python manage.py collectstatic -l


  * Préparation du dossier d'upload :
      mkdir -p media/uploads/


  * Lancement du serveur de développement :
      python manage.py runserver




****** 3. Déploiement ******

  * Création de la base de données dans MySQL :
      mysql -uroot -p
        CREATE DATABASE musicologie;
        exit;


  * Paramétrer l'authentification de MySQL :

      ** Éditer le fichier de réglages :
          nano settings.py
      ** Les réglages à modifier sont dans « DATABASES ».


  * Création des tables de la base de données :
      python manage.py syncdb


  * Création des révisions initiales :
      python manage.py createinitialrevisions


  * Collecte des fichiers statiques :
      sudo python manage.py collectstatic -l


  * Préparation du dossier d'upload :
      sudo mkdir -p /var/www/media/uploads/


  * Autoriser les uploads :
      sudo chgrp -R www-data /var/www/media/
      sudo chmod -R 0774 /var/www/media/


  * Création d'un site dans Apache :
      sudo nano /etc/apache2/sites-available/musicologie


  * Copier ceci dans ce dernier (en remplaçant ce qui est balisé ainsi : {{ quelque_chose }}) :
      <VirtualHost *:80>

        Alias /media/ /var/www/media/
        Alias /static/ /var/www/static/

        <Directory /var/www/media>
          Order deny,allow
          Allow from all
          Options FollowSymLinks
        </Directory>

        <Directory /var/www/static>
          Order deny,allow
          Allow from all
          Options FollowSymLinks
        </Directory>

        WSGIScriptAlias / {{ /chemin/du/projet }}/apache/django.wsgi

        <Directory {{ /chemin/du/projet }}/apache>
          Order deny,allow
          Allow from all
        </Directory>

      </VirtualHost>


  * On peut ajouter le paramètre « MaxRequestsPerChild 1 » avant <VirtualHost ...> pour éviter d’avoir à relancer le serveur à chaque modification.


  * Ajouter l’adresse de serveur à /etc/apache2/httpd.conf :
      ServerName {{ ip_du_serveur }}


  * Activer le site et désactiver le site par défaut :
      sudo a2ensite musicologie
      sudo a2dissite default


  * Relancer le serveur avec :
      sudo service apache2 restart

